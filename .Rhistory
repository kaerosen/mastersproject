rank <- 0
for(j in 1:length(ranks)) {
rank <- rank + which(ranks[[j]] == k[i])
}
final_rank[i] <- rank / 4
}
k[order(final_rank)]
plot_investigate(map_df$map, ca_3857$NAME)
map_df <- many_investigate(or_3857$geometry, or_3857$NAME)
ranks <- list(map_df$k[order(map_df$location_cost)],
map_df$k[order(map_df$adjacency_cost)],
map_df$k[order(map_df$angle_cost)],
map_df$k[order(map_df$roughness_cost)])
k <- c(2,3,5,10)
final_rank <- rep(0,4)
for (i in 1:length(k)) {
rank <- 0
for(j in 1:length(ranks)) {
rank <- rank + which(ranks[[j]] == k[i])
}
final_rank[i] <- rank / 4
}
k[order(final_rank)]
plot_investigate(map_df$map, or_3857$NAME)
map_df <- many_investigate(us_3857$geometry, us_3857$abbrev)
change_loc <- (max(map_df$location_cost) - min(map_df$location_cost)) / min(map_df$location_cost)
change_loc
change_adj <- (max(map_df$adjacency_cost) - min(map_dfadjacency_cost)) / min(map_df$adjacency_cost)
change_adj <- (max(map_df$adjacency_cost) - min(map_df$adjacency_cost)) / min(map_df$adjacency_cost)
change_angle <- (max(map_df$angle_cost) - min(map_df$angle_cost)) / min(map_df$angle_cost)
change_rough <- (max(map_df$roughness_cost) - min(map_df$roughness_cost)) / min(map_df$roughness_cost)
change_adj
change_angle
change_rough
mean(change_loc, change_adj, change_rough, change_angle)
mean(c(change_loc, change_adj, change_rough, change_angle))
map_df <- many_investigate(africa_3857$geometry, africa_3857$abbrev)
change_loc <- (max(map_df$location_cost) - min(map_df$location_cost)) / min(map_df$location_cost)
change_adj <- (max(map_df$adjacency_cost) - min(map_df$adjacency_cost)) / min(map_df$adjacency_cost)
change_angle <- (max(map_df$angle_cost) - min(map_df$angle_cost)) / min(map_df$angle_cost)
change_rough <- (max(map_df$roughness_cost) - min(map_df$roughness_cost)) / min(map_df$roughness_cost)
mean(c(change_loc, change_adj, change_rough, change_angle))
map_df <- many_investigate(asia_3857$geometry, asia_3857$ABBREV)
change_loc <- (max(map_df$location_cost) - min(map_df$location_cost)) / min(map_df$location_cost)
change_adj <- (max(map_df$adjacency_cost) - min(map_df$adjacency_cost)) / min(map_df$adjacency_cost)
change_angle <- (max(map_df$angle_cost) - min(map_df$angle_cost)) / min(map_df$angle_cost)
change_rough <- (max(map_df$roughness_cost) - min(map_df$roughness_cost)) / min(map_df$roughness_cost)
mean(c(change_loc, change_adj, change_rough, change_angle))
map_df <- many_investigate(ca_3857$geometry, ca_3857$NAME)
change_loc <- (max(map_df$location_cost) - min(map_df$location_cost)) / min(map_df$location_cost)
change_adj <- (max(map_df$adjacency_cost) - min(map_df$adjacency_cost)) / min(map_df$adjacency_cost)
change_angle <- (max(map_df$angle_cost) - min(map_df$angle_cost)) / min(map_df$angle_cost)
change_rough <- (max(map_df$roughness_cost) - min(map_df$roughness_cost)) / min(map_df$roughness_cost)
mean(c(change_loc, change_adj, change_rough, change_angle))
map_df <- many_investigate(or_3857$geometry, or_3857$NAME)
change_loc <- (max(map_df$location_cost) - min(map_df$location_cost)) / min(map_df$location_cost)
change_adj <- (max(map_df$adjacency_cost) - min(map_df$adjacency_cost)) / min(map_df$adjacency_cost)
change_angle <- (max(map_df$angle_cost) - min(map_df$angle_cost)) / min(map_df$angle_cost)
change_rough <- (max(map_df$roughness_cost) - min(map_df$roughness_cost)) / min(map_df$roughness_cost)
mean(c(change_loc, change_adj, change_rough, change_angle))
source("R/investigate_boundary.R")
map_df <- many_investigate(us_3857$geometry, us_3857$abbrev)
change_loc <- (max(map_df$location_cost) - min(map_df$location_cost)) / min(map_df$location_cost)
change_adj <- (max(map_df$adjacency_cost) - min(map_df$adjacency_cost)) / min(map_df$adjacency_cost)
change_angle <- (max(map_df$angle_cost) - min(map_df$angle_cost)) / min(map_df$angle_cost)
change_rough <- (max(map_df$roughness_cost) - min(map_df$roughness_cost)) / min(map_df$roughness_cost)
mean(c(change_loc, change_adj, change_rough, change_angle))
map_df <- many_investigate(africa_3857$geometry, africa_3857$abbrev)
change_loc <- (max(map_df$location_cost) - min(map_df$location_cost)) / min(map_df$location_cost)
change_adj <- (max(map_df$adjacency_cost) - min(map_df$adjacency_cost)) / min(map_df$adjacency_cost)
change_angle <- (max(map_df$angle_cost) - min(map_df$angle_cost)) / min(map_df$angle_cost)
change_rough <- (max(map_df$roughness_cost) - min(map_df$roughness_cost)) / min(map_df$roughness_cost)
mean(c(change_loc, change_adj, change_rough, change_angle))
map_df <- many_investigate(asia_3857$geometry, asia_3857$ABBREV)
change_loc <- (max(map_df$location_cost) - min(map_df$location_cost)) / min(map_df$location_cost)
change_adj <- (max(map_df$adjacency_cost) - min(map_df$adjacency_cost)) / min(map_df$adjacency_cost)
change_angle <- (max(map_df$angle_cost) - min(map_df$angle_cost)) / min(map_df$angle_cost)
change_rough <- (max(map_df$roughness_cost) - min(map_df$roughness_cost)) / min(map_df$roughness_cost)
mean(c(change_loc, change_adj, change_rough, change_angle))
map_df <- many_investigate(ca_3857$geometry, ca_3857$NAME)
change_loc <- (max(map_df$location_cost) - min(map_df$location_cost)) / min(map_df$location_cost)
change_adj <- (max(map_df$adjacency_cost) - min(map_df$adjacency_cost)) / min(map_df$adjacency_cost)
change_angle <- (max(map_df$angle_cost) - min(map_df$angle_cost)) / min(map_df$angle_cost)
change_rough <- (max(map_df$roughness_cost) - min(map_df$roughness_cost)) / min(map_df$roughness_cost)
mean(c(change_loc, change_adj, change_rough, change_angle))
map_df <- many_investigate(or_3857$geometry, or_3857$NAME)
change_loc <- (max(map_df$location_cost) - min(map_df$location_cost)) / min(map_df$location_cost)
change_adj <- (max(map_df$adjacency_cost) - min(map_df$adjacency_cost)) / min(map_df$adjacency_cost)
change_angle <- (max(map_df$angle_cost) - min(map_df$angle_cost)) / min(map_df$angle_cost)
change_rough <- (max(map_df$roughness_cost) - min(map_df$roughness_cost)) / min(map_df$roughness_cost)
mean(c(change_loc, change_adj, change_rough, change_angle))
map_df <- many_maps(or_3857$geometry, or_3857$NAME, square = FALSE, flat_topped = TRUE, plot = TRUE)
plot_many_maps(map_df$map, or_3857$NAME)
plot_many_maps <- function(map_list, labels, size = 2) {
polygons <- st_sfc(unlist(map_list, recursive = FALSE, use.names = FALSE),
crs = st_crs(map_list[1][[1]]))
id <- rep(1:length(map_list), lengths(map_list))
labels <- rep(labels, length(map_list))
df <- data.frame(polygons, id, labels)
ggplot(df) +
geom_sf(aes(geometry = geometry)) +
geom_sf_text(aes(geometry = geometry, label = labels), size = size,
fun.geometry = function(x) st_centroid(x)) +
facet_wrap(~ id) +
theme_classic() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank())
}
plot_many_maps(map_df$map[1:10], or_3857$NAME)
library(tilemaps)
library(sf)
library(dplyr)
library(ggplot2)
us <- spData::us_states %>%
filter(NAME != "District of Columbia") %>%
arrange(NAME) %>%
mutate(abbreviation = c("AL", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "ID",
"IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI",
"MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY",
"NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN",
"TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"))
us_3857 <- st_transform(us, 3857)
crs <- st_crs(us_3857$geometry)
R <- length(us_3857$geometry)
A <- sum(st_area(us_3857$geometry))
s <- as.numeric(sqrt(A/R))
neighbors <- st_touches(us_3857$geometry)
centroids <- transform_centroids(us_3857$geometry, neighbors, crs, s)
investigate_boundary <- function(data, noisy_centroids, new_centroids, k) {
# take sample of original boundary points
original_poly <- st_union(data)
original_boundary <- st_boundary(original_poly)
if (sum(class(original_boundary) == "sfc_MULTILINESTRING") == 0) {
original_boundary <- st_cast(original_boundary, "MULTILINESTRING")
}
boundary_points <- st_cast(original_boundary, "MULTIPOINT")
boundary_coords <- data.frame(st_coordinates(boundary_points))
prop <- lengths(original_boundary[[1]]) / sum(lengths(original_boundary[[1]]))
sample_size <- ceiling(prop * 1000)
sample_groups <- which(sample_size > 3)
subset <- boundary_coords %>%
filter(L1 == sample_groups[1])
if (sample_size[sample_groups[1]] > nrow(subset)) {
index <- 1:nrow(subset)
} else {
index <- c(1, sort(sample(2:(nrow(subset)-1), sample_size[sample_groups[1]]-2)),
nrow(subset))
}
sample <- subset[index,]
if (length(sample_groups) > 1) {
for (i in 2:length(sample_groups)) {
subset <- boundary_coords %>%
filter(L1 == sample_groups[i])
if (sample_size[sample_groups[i]] > nrow(subset)) {
index <- 1:nrow(subset)
} else {
index <- c(1, sort(sample(2:(nrow(subset)-1), sample_size[sample_groups[i]]-2)),
nrow(subset))
}
sample <- rbind(sample, subset[index,])
}
}
samp_points <- st_sfc(st_multipoint(as.matrix(sample[,1:2])), crs = st_crs(data))
samp_points <- st_cast(samp_points, "POINT")
# find k nearest noisy_centroids to each boundary point
# M is set of idices of the k nearest noisy centroids to original boundary points
dist_matrix <- matrix(as.numeric(st_distance(samp_points, noisy_centroids)), ncol = length(noisy_centroids))
M <- matrix(rep(0,nrow(sample)*k), ncol = k)
for (i in 1:nrow(sample)) {
M[i,] <- order(dist_matrix[i,])[1:k]
}
# calculate weights for centroids in M
W <- matrix(rep(0,nrow(sample)*k), ncol = k)
for (i in 1:nrow(sample)) {
W[i,] <- exp(-dist_matrix[i,M[i,]]^2 / (2*min(dist_matrix[i,M[i,]]^2)))
}
# normalize weights
W <- W / rowSums(W)
# calculate weighted mean of displacement vectors
noisy_coords <- data.frame(st_coordinates(noisy_centroids))
v <- matrix(rep(0, 2*nrow(sample)), ncol = 2)
for (i in 1:nrow(v)) {
x <- sum((sample[i,1] - noisy_coords[M[i,],1]) * W[i,])
y <- sum((sample[i,2] - noisy_coords[M[i,],2]) * W[i,])
v[i,] <- c(x,y)
}
# calculate new boundary points
new_coords <- data.frame(st_coordinates(new_centroids))
new_boundary <- matrix(rep(0, 2*nrow(sample)), ncol = 2)
R <- length(noisy_centroids)
A <- sum(st_area(data))
s <- as.numeric(sqrt(A/R))
for (i in 1:nrow(sample)) {
weighted_centroids <- new_coords[M[i,],] * W[i,]
x <- sum(weighted_centroids$X)
y <- sum(weighted_centroids$Y)
new_boundary[i,] <- v[i,] * sqrt(s / sqrt(sum(v[i,]^2))) + c(x,y)
}
# convert new boundary points to polygon
new_boundary_coords <- data.frame(new_boundary)
colnames(new_boundary_coords) <- c("X","Y")
new_boundary_coords$L1 <- sample$L1
coords_list <- list()
for (i in 1:length(sample_groups)) {
points <- new_boundary_coords %>%
filter(L1 == sample_groups[i]) %>%
select("X","Y")
coords_list[[i]] <- as.matrix(points)
}
new_boundary <- st_sfc(st_polygon(coords_list), crs = st_crs(data))
if (!st_is_valid(new_boundary)) {
new_boundary <- st_make_valid(new_boundary)
if ("sfc_GEOMETRYCOLLECTION" %in% class(new_boundary)) {
new_boundary <- st_collection_extract(new_boundary, "POLYGON")
}
}
new_boundary
}
boundary1 <- investigate_boundary(us_3857$geometry, centroids$noisy_centroids,
centroids$transformed_centroids, k = 2)
boundary2 <- investigate_boundary(us_3857$geometry, centroids$noisy_centroids,
centroids$transformed_centroids, k = 3)
boundary3 <- investigate_boundary(us_3857$geometry, centroids$noisy_centroids,
centroids$transformed_centroids, k = 5)
boundary4 <- investigate_boundary(us_3857$geometry, centroids$noisy_centroids,
centroids$transformed_centroids, k = 10)
legend_order <- c("2", "3", "5", "10")
ggplot() +
geom_sf(aes(geometry = st_boundary(boundary1), color = "2")) +
geom_sf(aes(geometry = st_boundary(boundary2), color = "3")) +
geom_sf(aes(geometry = st_boundary(boundary3), color = "5")) +
geom_sf(aes(geometry = st_boundary(boundary4), color = "10")) +
scale_color_discrete(name = "k", breaks = legend_order) +
theme(axis.text = element_blank(),
axis.ticks = element_blank())
many_investigate <- function(data, labels, square = TRUE, flat_topped = FALSE, prop = 0, interpolate = 1,
smoothness = 0, shift = list(c(0,0)), weights = c(1,1,1,1),
plot = FALSE, size = 2, k = c(2,.3,5,10)) {
num_maps <- length(prop) * length(interpolate) * length(smoothness) * length(shift) * length(k)
maps <- list()
shift_param <- list()
df <- data.frame(matrix(rep(0, num_maps*9), nrow = num_maps))
colnames(df) <- c("prop", "interpolate", "smoothness", "location_cost", "adjacency_cost",
"angle_cost", "roughness_cost", "total_cost", "k")
index <- 1
# get crs
crs <- st_crs(data)
# estimate grid step size
R <- length(data)
A <- sum(st_area(data))
s <- as.numeric(sqrt(A/R))
# find set of neighbors
neighbors <- st_touches(data)
# get original centroids
original_centroids <- st_centroid(data)
centroids <- transform_centroids(data, neighbors, crs, s, prop)
noisy_centroids <- centroids$noisy_centroids
transformed_centroids <- centroids$transformed_centroids
for (i in 1:length(k)) {
transformed_boundary <- investigate_boundary(data, noisy_centroids, transformed_centroids, k[i])
grid <- fit_tiles(transformed_boundary, R, s, square, flat_topped, shift[[1]])
tile_centroids <- st_centroid(grid)
perm <- assign_regions(transformed_centroids, tile_centroids)
grid <- grid[order(perm)]
tile_neighbors <- st_touches(grid)
loc <- location_cost(transformed_centroids, tile_centroids, s)
adj <- adjacency_cost(neighbors, tile_neighbors)
angle <- angle_cost(original_centroids, tile_centroids, neighbors)
rough <- roughness_cost(square, grid)
total_cost <- sum(c(loc,adj,angle,rough) * weights)
maps[[index]] <- grid
shift_param[[index]] <- shift[[1]]
df[index, ] <- c(prop, interpolate, smoothness, loc, adj, angle, rough, total_cost, k[i])
index <- index + 1
}
df$map <- maps
df$shift <- shift_param
if (plot) {
print(plot_many_maps(df$map, labels, size))
}
df
}
map_df <- many_investigate(us_3857$geometry, us_3857$abbrev)
many_investigate <- function(data, labels, square = TRUE, flat_topped = FALSE, prop = 0, interpolate = 1,
smoothness = 0, shift = list(c(0,0)), weights = c(1,1,1,1),
plot = FALSE, size = 2, k = c(2,3,5,10)) {
num_maps <- length(prop) * length(interpolate) * length(smoothness) * length(shift) * length(k)
maps <- list()
shift_param <- list()
df <- data.frame(matrix(rep(0, num_maps*9), nrow = num_maps))
colnames(df) <- c("prop", "interpolate", "smoothness", "location_cost", "adjacency_cost",
"angle_cost", "roughness_cost", "total_cost", "k")
index <- 1
# get crs
crs <- st_crs(data)
# estimate grid step size
R <- length(data)
A <- sum(st_area(data))
s <- as.numeric(sqrt(A/R))
# find set of neighbors
neighbors <- st_touches(data)
# get original centroids
original_centroids <- st_centroid(data)
centroids <- transform_centroids(data, neighbors, crs, s, prop)
noisy_centroids <- centroids$noisy_centroids
transformed_centroids <- centroids$transformed_centroids
for (i in 1:length(k)) {
transformed_boundary <- investigate_boundary(data, noisy_centroids, transformed_centroids, k[i])
grid <- fit_tiles(transformed_boundary, R, s, square, flat_topped, shift[[1]])
tile_centroids <- st_centroid(grid)
perm <- assign_regions(transformed_centroids, tile_centroids)
grid <- grid[order(perm)]
tile_neighbors <- st_touches(grid)
loc <- location_cost(transformed_centroids, tile_centroids, s)
adj <- adjacency_cost(neighbors, tile_neighbors)
angle <- angle_cost(original_centroids, tile_centroids, neighbors)
rough <- roughness_cost(square, grid)
total_cost <- sum(c(loc,adj,angle,rough) * weights)
maps[[index]] <- grid
shift_param[[index]] <- shift[[1]]
df[index, ] <- c(prop, interpolate, smoothness, loc, adj, angle, rough, total_cost, k[i])
index <- index + 1
}
df$map <- maps
df$shift <- shift_param
if (plot) {
print(plot_many_maps(df$map, labels, size))
}
df
}
map_df <- many_investigate(us_3857$geometry, us_3857$abbrev)
plot_investigate(map_df$map, us_3857$abbrev)
plot_investigate <- function(map_list, labels, size = 2) {
polygons <- st_sfc(unlist(map_list, recursive = FALSE, use.names = FALSE),
crs = st_crs(map_list[1][[1]]))
id <- rep(c("k = 2", "k = 3", "k = 5", "k = 10"), lengths(map_list))
id <- factor(id, c("k = 2", "k = 3", "k = 5", "k = 10"))
labels <- rep(labels, length(map_list))
df <- data.frame(polygons, id, labels)
ggplot(df) +
geom_sf(aes(geometry = geometry)) +
geom_sf_text(aes(geometry = geometry, label = labels), size = 2) +
facet_wrap(~ id) +
theme_classic() +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.line = element_blank())
}
plot_investigate(map_df$map, us_3857$abbrev)
mean(c(4,2,1,1,3))
mean(c(1,1,3,2,1))
mean(c(2,3,4,3,2))
mean(c(3,4,2,4,4))
library(tilemaps)
library(sf)
library(sf)
library(dplyr)
library(sf)
library(dplyr)
library(ggplot2)
source("investigate_boundary.R")
map_df <- many_investigate(us_3857$geometry, us_3857$abbrev)
us <- spData::us_states %>%
filter(NAME != "District of Columbia") %>%
arrange(NAME) %>%
mutate(abbreviation = c("AL", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "ID",
"IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI",
"MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY",
"NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN",
"TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"))
us_3857 <- st_transform(us, 3857)
map_df <- many_investigate(us_3857$geometry, us_3857$abbrev)
map_df$k[which(max(map_df$location_cost))]
max(map_df$location_cost)
?which
map_df$location_cost == max(map_df$location_cost)
which(map_df$location_cost == max(map_df$location_cost))
map_df$k[which(map_df$location_cost == max(map_df$location_cost))]
map_df$k[which(map_df$location_cost == max(map_df$location_cost))]
map_df$k[which(map_df$adjacency_cost == max(map_df$adjacency_cost))]
map_df$k[which(map_df$angle_cost == max(map_df$angle_cost))]
map_df$k[which(map_df$roughness_cost == max(map_df$roughness_cost))]
map_df$k[which(map_df$location_cost == min(map_df$location_cost))]
map_df$k[which(map_df$adjacency_cost == min(map_df$adjacency_cost))]
map_df$k[which(map_df$angle_cost == min(map_df$angle_cost))]
map_df$k[which(map_df$roughness_cost == min(map_df$roughness_cost))]
mean(c(1,1,2,1,1))
mean(c(2,3,4,3,2))
mean(c(4,2,1,2,3))
mean(3,4,3,4,4)
us <- st_read("Examples/Data/USA/cb_2018_us_state_5m.shp")
us <- us %>%
filter(!(NAME %in% c("Alaska", "Hawaii", "Commonwealth of the Northern Mariana Islands",
"United States Virgin Islands", "Guam", "American Samoa", "Puerto Rico")))
us$abbrev <- c("NE", "WA", "NM", "SD", "TX", "CA", "KY", "OH", "AL", "GA", "WI", "OR", "PA",
"MS", "MO", "NC", "OK", "WV", "NY", "IN", "KS", "ID", "NV", "VE", "MT", "MN",
"ND", "AZ", "DE", "RI", "CO", "UT", "VA", "WY", "LA", "MI", "MA", "FL", "CT",
"NJ", "MD", "SC", "ME", "NH", "DC", "IA", "AR", "TN", "IL")
us_3857 <- st_transform(us, 3857)
round(.1*nrow(us_3857))
world <- st_read("Examples/Data/World/ne_50m_admin_0_countries.shp")
africa <- world %>%
filter(CONTINENT == "Africa",
!(NAME %in% c("Madagascar", "São Tomé and Principe", "Comoros", "Cabo Verde")))
africa_3857 <- st_transform(africa, 3857)
round(.1*nrow(africa))
asia <- world %>%
filter(CONTINENT == "Asia",
!(NAME %in% c("Taiwan", "Sri Lanka", "Singapore", "Philippines", "Japan",
"Bahrain", "Indian Ocean Ter.", "N. Cyprus", "Cyprus")))
asia_3857 <- st_transform(asia, 3857)
round(.1*nrow(asia))
us_counties <- st_read("Examples/Data/California/cb_2018_us_county_20m.shp")
ca <- us_counties %>%
filter(STATEFP == "06")
ca_3857 <- st_transform(ca, 3857)
round(.1*nrow(ca))
or <- us_counties %>%
filter(STATEFP == "41")
or_3857 <- st_transform(or, 3857)
round(.1*nrow(or))
mean(c(11,17, 21,17,25,42,16,16,11,8))
round(.4*nrow(us))
round(.4*nrow(africa))
round(.4*nrow(asia))
round(.4*nrow(ca))
round(.4*nrow(or))
library(sf)
library(tidyverse)
library(lwgeom)
library(clue)
library(smoothr)
library(profvis)
library(tilemaps)
library(sf)
library(tidyverse)
library(lwgeom)
library(clue)
library(smoothr)
library(profvis)
library(tilemaps)
de <- st_read("Examples/Data/Germany/DEU_adm1.shp")
de$abbrev <- c("BW", "BY", "BE", "BB", "HB", "HH", "HE", "MV", "NI", "NW", "RP", "SL", "ST", "SN", "SH", "TH")
de_3857 <- st_transform(de, 3857)
profvis(generate_map(de_3857$geometry))
?summary
library(sf)
?st_area
?st_make_grid
library(tidyverse)
?geom_line
?filter
?sum
?mean
?st_make_grid
?select
?geom_bar
?st_make_grid
?rbinom
?dplyr::select
?geom_bar
library(smoothr)
?smooth
?rbinom
?geom_bar
?rbinom
library(sf)
nc_3338 <- st_transform(nc,3338)
data(nc)
library(spData)
us_3338 <- st_transform(us_states, 3338)
ggplot() + geom_sf(aes(geometry = us_3338$geometry))
library(tilemaps)
us_3338$tile_map <- generate_map(us_3338$geometry)
ggplot() + geom_sf(aes(geometry = us_3338$tile_map))
library(spData)
us_3857 <- st_transform(us_states, 3857)
us_3857$tile_map <- generate_map(us_3857$geometry, square = FALSE)
ggplot() + geom_sf(aes(geometry = us_3857$tile_map))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(tilemaps)
?tilemaps::generate_map
devtools::document()
?generate_map
devtools::document()
?generate_map
devtools::document()
?generate_map
?layer
?geom_text
?aes
?geom_text
us_states$NAME
arrange(us_states, NAME)$NAME
devtools::document()
?many_maps
devtools::document()
?many_maps
devtools::document()
?plot_many_maps
devtools::document()
devtools::document()
?plot_many_maps
devtools::document()
